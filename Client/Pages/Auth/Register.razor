@page "/register-no-login"
@inherits LayoutComponentBase
@inject IAccountsRepository accountsRepository
@inject IUsersRepository usersRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IDisplayMessage displayMessage
@inject ILogger<UserInfo> logger

@using Datacar.Client.Auth

<div class="container">
    <div class="row justify-content-center">
        <div class="col col-lg-4">
            <div class="rounded registerform">
                <div>
                    <h3>Register to Datacar</h3>
                </div>
                <div>
                    <EditForm Model="userInfo" OnValidSubmit="RegisterUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Email:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@userInfo.Email" />
                                <ValidationMessage For="@(() => userInfo.Email)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Password:</label>
                            <div>
                                <InputPassword class="form-control" @bind-Value="@userInfo.Password" />
                                <ValidationMessage For="@(() => userInfo.Password)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Mobile Phone Number:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@userInfo.MobilePhoneNumber" />
                                <ValidationMessage For="@(() => userInfo.MobilePhoneNumber)" />
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Novo utilizador</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private UserInfo userInfo = new UserInfo();
    ApplicationUser appUser = new ApplicationUser();

    private async Task RegisterUser()
    {
        try
        {

            var userToken = await accountsRepository.Register(userInfo);
            //await loginService.Login(userToken);
            appUser = await usersRepository.GetUserByName(userInfo.Email);
            await usersRepository.AssignRole(new EditRoleDTO() { RoleName = Constants.Admin, UserId = appUser.Id });
            await displayMessage.SweetAlert(Constants.SWSuccess, Constants.NewUserCreated);
        }
        catch
        {
            await displayMessage.SweetAlert(Constants.SWError, Constants.AuthorizationFailed);
        }
    }
}
