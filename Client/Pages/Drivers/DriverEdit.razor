@page "/drivers/edit/{DriverId:int}"
@inject IDriversRepository driversRepository
@inject NavigationManager navigationManager
@inject ILogger<Drivers> logger

@if (driverInfo == null)
{
    <p>Loading driver info</p>
}
else
{
    <div class="main-page-container">
        <div class="row main-page-header">
            <div class="col col-lg-12 col-md-12">
                <main-page-title>Atualizar condutor @driverInfo.Name</main-page-title>
            </div>
        </div>
    </div>

    <DriverForm Driver="driverInfo" OnValidSubmit="Edit"></DriverForm>
}

@code {
    [Parameter] public int DriverId { get; set; }
    public Drivers driverInfo;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            logger.LogInformation($"Driver Edit Page: GetDriverById {DriverId}");
            driverInfo = await driversRepository.GetDriverById(DriverId);
        }
        catch (Exception ex)
        {
            logger.LogError($"Driver Edit Page: {ex.ToString()}");
        }
    }

    private async Task Edit()
    {
        try
        {            
            await driversRepository.UpdateDriver(driverInfo);
            logger.LogInformation($"Driver Edit Page: Driver {driverInfo.Id} updated");
            navigationManager.NavigateTo("drivers");
        }
        catch(Exception ex)
        {
            logger.LogError($"Error:{ex.Message.ToString()}");            
        }
    }
}

