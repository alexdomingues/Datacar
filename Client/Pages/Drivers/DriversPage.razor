@page "/drivers"
@inject IDriversRepository driversRepository
@inject ILogger<Drivers> logger
@attribute [Authorize]

<div class="main-page-container">
    <div class="row main-page-header">
        <div class="col col-lg-8 col-md-8">
            <main-page-title>Condutores</main-page-title>
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="col col-lg-4 col-md-8">
                    <a class="btn btn-info" href="/drivers/create">Criar condutor</a>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
            SelectedPage="SelectedPage" />

<div class="main-list">
    <DriversList Drivers="drivers" />
</div>

@*<div>
    <GenericList List="cars">
    <WholeListTemplate>
    <table class="table table-striped">
    <thead>
    <tr>
    <th>
    </th>
    <th>Matrícula</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in cars)
    {
    <tr>
    <td>
    <a class="btn btn-success">Edit</a>
    <button class="btn btn-danger">Delete</button>
    </td>
    <td>@item.License</td>
    </tr>
    }
    </tbody>
    </table>
    </WholeListTemplate>
    </GenericList>
    </div>*@

@code {
    List<Drivers> drivers;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1 };
    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDrivers();
        }
        catch (Exception ex)
        {
            logger.LogError($"Drivers Page:{ex.Message.ToString()}");
        }
    }

    private async Task LoadDrivers()
    {
        logger.LogInformation("Drivers Page: Get Drivers list");
        var paginatedResponse = await driversRepository.GetDrivers(paginationDTO);
        drivers = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;

        Console.WriteLine($"Total Pages = {paginatedResponse.TotalAmountPages}");
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadDrivers();
    }

    //
    //singleton.Value += 1;
    //transient.Value += 1
}
