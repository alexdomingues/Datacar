@page "/drivers"
@layout MainLayout
@inject IDriversRepository driversRepository
@inject ILogger<Drivers> logger
@attribute [Authorize]

<div class="container">
    <div class="row list-title">
        <div class="col">
            <h3>Condutores</h3>
        </div>
        <div class="col">
            <div class="btn-area">
                <AuthorizeView>
                    <Authorized>
                        <a class="btn btn-outline-dark" href="/drivers/create">Criar condutor</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
    <div>
        <GenericList List="drivers">
            <WholeListTemplate>
                <table class="table table-hover generic-list">
                    <thead>
                        <tr>                            
                            <th scope="col">Matrícula</th>
                            <th scope ="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in drivers)
                        {
                        <tr>
                            <td>@item.Name</td>
                            <td>
                                <a class="btn btn-success">Edit</a>
                                <button class="btn btn-danger">Delete</button>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </WholeListTemplate>
        </GenericList>
    </div>

    <Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
                SelectedPage="SelectedPage" />
</div>

@code {
    List<Drivers> drivers;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1 };
    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDrivers();
        }
        catch (Exception ex)
        {
            logger.LogError($"Drivers Page:{ex.Message.ToString()}");
        }
    }

    private async Task LoadDrivers()
    {
        logger.LogInformation("Drivers Page: Get Drivers list");
        var paginatedResponse = await driversRepository.GetDrivers(paginationDTO);
        drivers = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;

        Console.WriteLine($"Total Pages = {paginatedResponse.TotalAmountPages}");
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadDrivers();
    }

    //
    //singleton.Value += 1;
    //transient.Value += 1
}
