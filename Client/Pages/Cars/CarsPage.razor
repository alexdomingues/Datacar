@page "/cars"
@layout MainLayout
@inject ICarsRepository carsRepository
@inject ILogger<Cars> logger
@inject IJSRuntime js
@attribute [Authorize]

<div class="container">
    <div class="row list-title">
        <div class="col">
            <h3>Viaturas</h3>
        </div>
        <div class="col">
            <div class="btn-area">
                <a class="btn btn-outline-dark" href="/cars/create">Criar viatura</a>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div>
                <GenericList List="cars">
                    <WholeListTemplate>
                        <table class="table table-hover generic-list">
                            <thead>
                                <tr>
                                    <th scope="col">Matrícula</th>
                                    <th scope="col"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in cars)
                                {
                                    <tr>
                                        <td>@item.License</td>
                                        <td>
                                            <a href="/cars/edit/@item.Id" class="btn btn-success">Edit</a>
                                            <button class="btn btn-danger" @onclick="@(()=>DeleteCar(item.Id))">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </WholeListTemplate>
                </GenericList>
            </div>
        </div>
    </div>
</div>

@code {
    string listTypeShort = ListType.Short.ToString();
    List<Cars> cars;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            logger.LogInformation("Cars Page: Get Cars list");
            cars = await carsRepository.GetCars();
        }
        catch (Exception ex)
        {
            logger.LogError($"Cars Page:{ex.ToString()}");
        }
    }

    private async Task DeleteCar(int Id)
    {
        try
        {
            var confirmed = await js.Confirm($"Tem a certeza que pretende apagar o utilizador?");
            if (confirmed)
            {
                await carsRepository.DeleteCar(Id);
                logger.LogInformation($"Cars Page: Car {Id} deleted");
                logger.LogInformation("Cars Page: Get Cars list");
                cars = await carsRepository.GetCars();
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Cars Page:{ex.ToString()}");
        }
    }
}
